syntax = "proto3";

import "google/protobuf/timestamp.proto";

enum Status {
    failure = 0;
    success = 1;
}
service Logger {
    // Buffered logs are logs that are temporarily held in memory before being 
    // written to their final destination. This can improve performance by 
    // reducing the number of write operations, but requires flushing to 
    // ensure all data is persisted.

    rpc RequestLog (Log) returns (LogResponse);

    rpc SendLog (Log) returns (LogResponse);
    
    // FlushLog ensures that all logs currently buffered are written out. 
    // This is typically used to ensure that any logs in memory are persisted 
    // to their destination, such as a file or external logging service.
    rpc FlushLog (Log) returns (LogResponse);

    // CloseLog not only flushes all buffered logs but also closes the log 
    // stream, releasing any resources associated with it. After closing, 
    // no further logs can be written to the stream.
    rpc CloseLog (Log) returns (LogResponse);

    // GetStream returns a stream of logs that match the given request. The 
    // stream will contain logs that are sent by the client or server. The 
    // stream will continue until the connection is closed. The client should 
    // read the stream until it is closed.
    rpc GetStream (LogStreamRequest) returns (stream Log);

    // CloseStream closes the given log stream and releases any resources 
    // associated with it. After closing, no further logs can be written to 
    // the stream.
    rpc CloseStream (LogStreamRequest) returns (LogResponse);

    // PerformQuery performs a query on the logs. The query is defined by the 
    // client and can be used to retrieve logs that match specific criteria. 
    // The server will return the results of the query.
    rpc PerformQuery (LogQueryRequest) returns (LogResponse);

}

message Log {
    string service_id = 1; // identifier for the service
    string trace_id = 2; // tarces operation throughout the services (i.e sign-in)
    string span_id = 3; // traces operation through actions (events in trace)
    string parent_id = 4; // for linking requests (can track process liyfcycle)
    google.protobuf.Timestamp timestamp = 5; // TODO use ntp time on micro services for more accuracy
    string log_level = 6;// SEC, INFO, ERROR, ETC
    string message = 7;
    optional string metadata = 8; // JSON format additional data(host, user, etc)
}

// LogResponse is the response to the logging API. If the request is
// successful, success will be set to 1. If there is an error, success will
// be set to 0 and the message will contain the error message.
message LogResponse {
    Status success = 1;
    optional string message = 2;
}

// LogStreamRequest is the request to get a stream of logs. The service_id
// must be provided to identify the service for which to get the logs.
message LogStreamRequest {
    string service_id = 1; // identifier for the service
}

// LogQueryRequest is the request to query the logs. The service_id must be
// provided to identify the service for which to query the logs. The query
// field should contain the query string used to filter logs.
message LogQueryRequest {
    // Identifier for the service
    string service_id = 1;

    // The query string used to filter logs
    string query = 2;
}
